#ifndef CACHEGRAND_MODULE_REDIS_H
#define CACHEGRAND_MODULE_REDIS_H

#ifdef __cplusplus
extern "C" {
#endif

#include "module_redis_autogenerated_commands_enum.h"

#define MODULE_REDIS_COMMAND_FUNCPTR_NAME(COMMAND_FUNC_PTR, TYPE) \
    module_redis_process_command_##COMMAND_FUNC_PTR##_##TYPE

#define MODULE_REDIS_COMMAND_FUNCPTR_NAME_AUTOGEN(COMMAND_FUNC_PTR, TYPE) \
    module_redis_process_command_##COMMAND_FUNC_PTR##_##TYPE##_autogen

#define MODULE_REDIS_COMMAND_FUNCPTR_GENERIC(COMMAND_FUNC_PTR, TYPE, ARGUMENTS) \
    module_redis_command_funcptr_retval_t MODULE_REDIS_COMMAND_FUNCPTR_NAME(COMMAND_FUNC_PTR, TYPE) (ARGUMENTS)

#define MODULE_REDIS_COMMAND_FUNCPTR_GENERIC_AUTOGEN(COMMAND_FUNC_PTR, TYPE, ARGUMENTS) \
    module_redis_command_funcptr_retval_t MODULE_REDIS_COMMAND_FUNCPTR_NAME_AUTOGEN(COMMAND_FUNC_PTR, TYPE) (ARGUMENTS)

#define MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_BASE \
    module_redis_connection_context_t *connection_context

#define MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_END \
    MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_BASE

#define MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_FREE \
    MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_BASE

#define MODULE_REDIS_COMMAND_FUNCPTR_COMMAND_END(COMMAND_FUNC_PTR) \
    MODULE_REDIS_COMMAND_FUNCPTR_GENERIC( \
        COMMAND_FUNC_PTR, \
        command_end, \
        MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_END)

#define MODULE_REDIS_COMMAND_FUNCPTR_COMMAND_FREE_AUTOGEN(COMMAND_FUNC_PTR) \
    MODULE_REDIS_COMMAND_FUNCPTR_GENERIC_AUTOGEN( \
        COMMAND_FUNC_PTR, \
        command_free, \
        MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_FREE)

#define MODULE_REDIS_COMMAND_AUTOGEN(ID, COMMAND, COMMAND_FUNC_PTR, REQUIRED_ARGS_COUNT, HAS_VARIABLE_ARGUMENTS, ARGS_COUNT, KEY_SPECS_COUNT) \
    { \
        .command = MODULE_REDIS_COMMAND_##ID, \
        .length = sizeof(COMMAND) - 1, \
        .string = (COMMAND), \
        .string_len = strlen(COMMAND), \
        .context_size = sizeof(CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), context_t)), \
        .key_specs = CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), key_specs), \
        .key_specs_count = (KEY_SPECS_COUNT), \
        .arguments = CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), arguments), \
        .arguments_count = (ARGS_COUNT), \
        .command_end_funcptr = MODULE_REDIS_COMMAND_FUNCPTR_NAME(COMMAND_FUNC_PTR, command_end), \
        .command_free_funcptr = MODULE_REDIS_COMMAND_FUNCPTR_NAME_AUTOGEN(COMMAND_FUNC_PTR, command_free), \
        .required_arguments_count = (REQUIRED_ARGS_COUNT), \
        .has_variable_arguments = (HAS_VARIABLE_ARGUMENTS), \
    }

#define MODULE_REDIS_COMMAND(ID, COMMAND, COMMAND_FUNC_PTR, REQUIRED_ARGS_COUNT, HAS_VARIABLE_ARGUMENTS, KEY_SPECS_COUNT, ARGS_COUNT) \
    { \
        .command = MODULE_REDIS_COMMAND_##ID, \
        .length = sizeof(COMMAND) - 1, /* sizeof takes into account the NULL char at the end, different behaviour than strlen */ \
        .string = (COMMAND), \
        .string_len = strlen(COMMAND), \
        .context_size = sizeof(CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), context_t)), \
        .key_specs = CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), key_specs), \
        .key_specs_count = (ARGS_COUNT), \
        .arguments = CONCAT(CONCAT(module_redis_command, COMMAND_FUNC_PTR), arguments), \
        .arguments_count = (ARGS_COUNT), \
        .command_end_funcptr = MODULE_REDIS_COMMAND_FUNCPTR_NAME(COMMAND_FUNC_PTR, command_end), \
        .command_free_funcptr = MODULE_REDIS_COMMAND_FUNCPTR_NAME(COMMAND_FUNC_PTR, command_free), \
        .required_arguments_count = (REQUIRED_ARGS_COUNT), \
        .has_variable_arguments = (HAS_VARIABLE_ARGUMENTS), \
    }

typedef void module_redis_command_context_t;
typedef bool module_redis_command_funcptr_retval_t;

// This typedef is needed before the declaration of the function pointers as it's used in there
// the entire struct can't be moved because of the dependencies
typedef struct module_redis_connection_context module_redis_connection_context_t;

typedef module_redis_command_funcptr_retval_t (module_redis_command_end_funcptr_t)(
        MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_END);
typedef module_redis_command_funcptr_retval_t (module_redis_command_free_funcptr_t)(
        MODULE_REDIS_COMMAND_FUNCPTR_ARGUMENTS_COMMAND_FREE);

typedef struct module_redis_key module_redis_key_t;
struct module_redis_key {
    char *key;
    size_t length;
};

typedef struct module_redis_pattern module_redis_pattern_t;
struct module_redis_pattern {
    char *pattern;
    size_t length;
};

enum module_redis_key_access_flags {
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_UNKNOWN = 0,
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_READ_ONLY = 1 << 0,
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_READ_WRITE = 1 << 1,
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_WRITE_ONLY = 1 << 2,
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_DELETE = 1 << 3,
    MODULE_REDIS_COMMAND_KEY_ACCESS_FLAGS_VARIABLE_FLAGS = 1 << 4,
};
typedef enum module_redis_key_access_flags module_redis_key_access_flags_t;

enum module_redis_value_access_flags {
    MODULE_REDIS_COMMAND_VALUE_ACCESS_FLAGS_UNKNOWN = 0,
    MODULE_REDIS_COMMAND_VALUE_ACCESS_FLAGS_ACCESS = 1 << 0,
    MODULE_REDIS_COMMAND_VALUE_ACCESS_FLAGS_UPDATE = 1 << 1,
    MODULE_REDIS_COMMAND_VALUE_ACCESS_FLAGS_INSERT = 1 << 2,
    MODULE_REDIS_COMMAND_VALUE_ACCESS_FLAGS_DELETE = 1 << 3,
};
typedef enum module_redis_value_access_flags module_redis_value_access_flags_t;

typedef struct module_redis_command_key_spec module_redis_command_key_spec_t;
struct module_redis_command_key_spec {
    module_redis_key_access_flags_t key_access_flags;
    module_redis_value_access_flags_t value_access_flags;
    bool is_unknown;
    int begin_search_index_pos;
    int find_keys_range_lastkey;
    int find_keys_range_step;
    int find_keys_range_limit;
};

enum module_redis_command_argument_type {
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_UNSUPPORTED,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_KEY,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_STRING,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_INTEGER,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_DOUBLE,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_UNIXTIME,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_BOOL,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_PATTERN,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_BLOCK,
    MODULE_REDIS_COMMAND_ARGUMENT_TYPE_ONEOF,
};
typedef enum module_redis_command_argument_type module_redis_command_argument_type_t;

typedef struct module_redis_command_argument module_redis_command_argument_t;
struct module_redis_command_argument {
    char *name;
    module_redis_command_argument_type_t type;
    module_redis_command_argument_t *parent_argument;
    char *since;
    uint16_t key_spec_index;
    char *token;
    module_redis_command_argument_t *sub_arguments;
    uint16_t sub_arguments_count;
    bool is_positional;
    bool is_optional;
    bool is_sub_argument;
    bool has_sub_arguments;
    bool has_multiple_occurrences;
    bool has_multiple_token;
    size_t argument_context_member_size;
    off_t argument_context_member_offset;
};

typedef struct module_redis_command_info module_redis_command_info_t;
struct module_redis_command_info {
    module_redis_commands_t command;
    size_t length;
    // Redis longest command is 10 chars
    char string[32];
    uint8_t string_len;
    uint16_t context_size;
    module_redis_command_key_spec_t *key_specs;
    uint16_t key_specs_count;
    module_redis_command_argument_t *arguments;
    uint16_t arguments_count;
    module_redis_command_end_funcptr_t *command_end_funcptr;
    module_redis_command_free_funcptr_t *command_free_funcptr;
    uint8_t required_arguments_count;
    bool has_variable_arguments;
};

struct module_redis_connection_context {
    protocol_redis_resp_version_t resp_version;
    protocol_redis_reader_context_t reader_context;
    network_channel_t *network_channel;
    network_channel_buffer_t read_buffer;
    size_t current_argument_token_data_offset;
    bool terminate_connection;
    struct {
        char *message;
    } error;
    struct {
        size_t data_length;
        module_redis_command_info_t *info;
        module_redis_command_context_t *context;
        bool skip;
    } command;
};

#include "module_redis_autogenerated_commands_contexts.h"

void module_redis_accept(
        network_channel_t *channel);

bool module_redis_process_data(
        module_redis_connection_context_t *connection_context,
        network_channel_buffer_t *read_buffer);

#ifdef __cplusplus
}
#endif

#endif //CACHEGRAND_MODULE_REDIS_H
