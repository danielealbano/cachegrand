#ifndef CACHEGRAND_MODULE_REDIS_COMMAND_HELPER_CONFIG_H
#define CACHEGRAND_MODULE_REDIS_COMMAND_HELPER_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

struct module_redis_command_helper_config_parameter_key_value {
    char *name;
    char *value;
    bool to_handle;
};
typedef struct module_redis_command_helper_config_parameter_key_value module_redis_command_helper_config_parameter_key_value_t;

// TODO: should have callback functions for each parameter to get the value, free the allocated memory and set it, if
//       no callback is provided for the set, then it should not be allowed to set it. The set callback should also
//       check if the caller is authorized to set the parameter.
static module_redis_command_helper_config_parameter_key_value_t module_redis_command_helper_config_parameters[] = {
        { "acl-pubsub-default", "resetchannels", false },
        { "aclfile", "", false },
        { "acllog-max-len", "0", false },
        { "active-defrag-cycle-max", "0", false },
        { "active-defrag-cycle-min", "0", false },
        { "active-defrag-ignore-bytes", "0", false },
        { "active-defrag-max-scan-fields", "0", false },
        { "active-defrag-threshold-lower", "0", false },
        { "active-defrag-threshold-upper", "0", false },
        { "active-expire-effort", "0", false },
        { "activedefrag", "no", false },
        { "activerehashing", "no", false },
        { "always-show-logo", "no", false },
        { "aof_rewrite_cpulist", "", false },
        { "aof-disable-auto-gc", "no", false },
        { "aof-load-truncated", "no", false },
        { "aof-rewrite-incremental-fsync", "no", false },
        { "aof-timestamp-enabled", "no", false },
        { "aof-use-rdb-preamble", "no", false },
        { "appenddirname", "", false },
        { "appendfilename", "", false },
        { "appendfsync", "no", false },
        { "appendonly", "no", false },
        { "auto-aof-rewrite-min-size", "0", false },
        { "auto-aof-rewrite-percentage", "0", false },
        { "bgsave_cpulist", "", false },
        { "bind-source-addr", "", false },
        { "bind", NULL, true },
        { "bio_cpulist", "", false },
        { "busy-reply-threshold", "5000", false },
        { "client-output-buffer-limit", "normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60", false },
        { "client-query-buffer-limit", NULL, true },
        { "cluster-allow-pubsubshard-when-down", "no", false },
        { "cluster-allow-reads-when-down", "no", false },
        { "cluster-allow-replica-migration", "no", false },
        { "cluster-announce-bus-port", "0", false },
        { "cluster-announce-hostname", "", false },
        { "cluster-announce-ip", "", false },
        { "cluster-announce-port", "0", false },
        { "cluster-announce-tls-port", "0", false },
        { "cluster-config-file", "", false },
        { "cluster-enabled", "no", false },
        { "cluster-link-sendbuf-limit", "0", false },
        { "cluster-migration-barrier", "0", false },
        { "cluster-node-timeout", "0", false },
        { "cluster-port", "0", false },
        { "cluster-preferred-endpoint-type", "ip", false },
        { "cluster-replica-no-failover", "no", false },
        { "cluster-replica-validity-factor", "0", false },
        { "cluster-require-full-coverage", "no", false },
        { "cluster-slave-no-failover", "no", false },
        { "cluster-slave-validity-factor", "0", false },
        { "crash-log-enabled", NULL, true },
        { "crash-memcheck-enabled", "no", false },
        { "daemonize", "no", false },
        { "databases", NULL, true },
        { "dbfilename", NULL, true },
        { "dir", "", false },
        { "disable-thp", "no", false },
        { "dynamic-hz", "yes", false },
        { "enable-debug-command", "no", false },
        { "enable-module-command", "no", false },
        { "enable-protected-configs", "no", false },
        { "hash-max-listpack-entries", "512", false },
        { "hash-max-listpack-value", "64", false },
        { "hash-max-ziplist-entries", "512", false },
        { "hash-max-ziplist-value", "64", false },
        { "hll-sparse-max-bytes", "3000", false },
        { "hz", "10", false },
        { "ignore-warnings", "", false },
        { "io-threads-do-reads", "yes", false },
        { "io-threads", "", false },
        { "jemalloc-bg-thread", "no", false },
        { "latency-monitor-threshold", "0", false },
        { "latency-tracking-info-percentiles", "50 99 99.9", false },
        { "latency-tracking", "no", false },
        { "lazyfree-lazy-eviction", "no", false },
        { "lazyfree-lazy-expire", "no", false },
        { "lazyfree-lazy-server-del", "no", false },
        { "lazyfree-lazy-user-del", "no", false },
        { "lazyfree-lazy-user-flush", "no", false },
        { "lfu-decay-time", "0", false },
        { "lfu-log-factor", "0", false },
        { "list-compress-depth", "0", false },
        { "list-max-listpack-size", "0", false },
        { "list-max-ziplist-size", "0", false },
        { "logfile", "", false },
        { "loglevel", "info", false },
        { "lua-time-limit", "5000", false },
        { "masterauth", "", false },
        { "masteruser", "", false },
        { "maxclients", NULL, true },
        { "maxmemory-clients", "0", false },
        { "maxmemory-eviction-tenacity", "10", false },
        { "maxmemory-policy", NULL, true },
        { "maxmemory-samples", NULL, true },
        { "maxmemory", NULL, true },
        { "min-replicas-max-lag", "0", false },
        { "min-replicas-to-write", "0", false },
        { "min-slaves-max-lag", "0", false },
        { "min-slaves-to-write", "0", false },
        { "no-appendfsync-on-rewrite", "no", false },
        { "notify-keyspace-events", "", false },
        { "oom-score-adj-values", "0 200 800", false },
        { "oom-score-adj", "no", false },
        { "pidfile", "", false },
        { "port", NULL, true },
        { "proc-title-template", "", false },
        { "propagation-error-behavior", "ignore", false },
        { "protected-mode", "yes", false },
        { "proto-max-bulk-len", NULL, true },
        { "rdb-del-sync-files", "no", false },
        { "rdb-save-incremental-fsync", "yes", false },
        { "rdbchecksum", "no", false },
        { "rdbcompression", "yes", false },
        { "repl-backlog-size", "0", false },
        { "repl-backlog-ttl", "0", false },
        { "repl-disable-tcp-nodelay", "no", false },
        { "repl-diskless-load", "disabled", false },
        { "repl-diskless-sync-delay", "0", false },
        { "repl-diskless-sync-max-replicas", "0", false },
        { "repl-diskless-sync", "yes", false },
        { "repl-ping-replica-period", "10", false },
        { "repl-ping-slave-period", "10", false },
        { "repl-timeout", "0", false },
        { "replica-announce-ip", "", false },
        { "replica-announce-port", "0", false },
        { "replica-announced", "no", false },
        { "replica-ignore-disk-write-errors", "no", false },
        { "replica-ignore-maxmemory", "yes", false },
        { "replica-lazy-flush", "no", false },
        { "replica-priority", "100", false },
        { "replica-read-only", "yes", false },
        { "replica-serve-stale-data", "yes", false },
        { "replicaof", "", false },
        { "requirepass", "", false },
        { "sanitize-dump-payload", "no", false },
        { "save", "", false },
        { "server_cpulist", "", false },
        { "set-max-intset-entries", "512", false },
        { "set-proc-title", "yes", false },
        { "shutdown-on-sigint", "default", false },
        { "shutdown-on-sigterm", "default", false },
        { "shutdown-timeout", "10", false },
        { "slave-announce-ip", "", false },
        { "slave-announce-port", "0", false },
        { "slave-ignore-maxmemory", "yes", false },
        { "slave-lazy-flush", "no", false },
        { "slave-priority", "100", false },
        { "slave-read-only", "yes", false },
        { "slave-serve-stale-data", "yes", false },
        { "slaveof", "", false },
        { "slowlog-log-slower-than", "10000", false },
        { "slowlog-max-len", "128", false },
        { "socket-mark-id", "0", false },
        { "stop-writes-on-bgsave-error", "yes", false },
        { "stream-node-max-bytes", "4096", false },
        { "stream-node-max-entries", "100", false },
        { "supervised", "no", false },
        { "syslog-enabled", "no", false },
        { "syslog-facility", "local0", false },
        { "syslog-ident", "redis", false },
        { "tcp-backlog", "511", false },
        { "tcp-keepalive", "300", false },
        { "timeout", "0", false },
        { "tls-auth-clients", "yes", false },
        { "tls-ca-cert-dir", "", false },
        { "tls-ca-cert-file", "", false },
        { "tls-cert-file", "", false },
        { "tls-ciphers", "", false },
        { "tls-ciphersuites", "", false },
        { "tls-client-cert-file", "", false },
        { "tls-client-key-file-pass", "", false },
        { "tls-client-key-file", "", false },
        { "tls-cluster", "no", false },
        { "tls-dh-params-file", "", false },
        { "tls-key-file-pass", "", false },
        { "tls-key-file", "", false },
        { "tls-port", NULL, true },
        { "tls-prefer-server-ciphers", "no", false },
        { "tls-protocols", "", false },
        { "tls-replication", "no", false },
        { "tls-session-cache-size", "20480", false },
        { "tls-session-cache-timeout", "300", false },
        { "tls-session-caching", "yes", false },
        { "tracking-table-max-keys", "1000000", false },
        { "unixsocket", "", false },
        { "unixsocketperm", "0", false },
        { "zset-max-listpack-entries", "128", false },
        { "zset-max-listpack-value", "64", false },
        { "zset-max-ziplist-entries", "128", false },
        { "zset-max-ziplist-value", "64", false },
};

module_redis_command_helper_config_parameter_key_value_t *module_redis_command_helper_config_parameter_get(
        char *key,
        size_t key_length);

char *module_redis_command_config_get_handle_parameter_value(
        config_t *config,
        config_module_t *config_module,
        storage_db_config_t *storage_db_config,
        char *parameter_name);

bool module_redis_command_helper_config_send_response(
        module_redis_connection_context_t *connection_context,
        module_redis_command_helper_config_parameter_key_value_t *parameters,
        uint64_t parameters_count);

#ifdef __cplusplus
}
#endif

#endif //CACHEGRAND_MODULE_REDIS_COMMAND_HELPER_CONFIG_H
