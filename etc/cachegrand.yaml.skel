# Set cpu pinning, accepted values:
# - cpu number, starting from 0 (ie. 0, 1, 2)
# - cpu range, starting from 0 (ie. 2-12)
# - all, will use all the available cpus
cpus:
  - all

# Suggested 1 worker per cpu, the number of workers that will be started will be n. cpus * threads_per_count
workers_per_cpus: 1

run_in_foreground: false

pidfile_path: /var/run/cachegrand/cachegrand.pid

# When use_hugepages is set to true, cachegrand will use them e.g. to reduce TBL misses and use a specialized memory
# allocator. The various improvements provided help to improve the performance up to 10%.
# The huge pages in the OS need to be enabled in order to use this functionality, please for more information refer to
# https://github.com/danielealbano/cachegrand/blob/main/docs/hugepages.md
use_hugepages: false

network:
  backend: io_uring
  max_clients: 100
  listen_backlog: 100

modules:
  - type: redis

    # Redis specific settings
    redis:
      # The maximum key length can't be greater than 65536 bytes
      max_key_length: 8192
      max_command_length: 536870912
      max_command_arguments: 10000
      
      # If enabled, the command parsing will refuse duplicated or exclusive arguments
      strict_parsing: false

      # If enabled, the client will have to authenticate before being able to execute any command, the password field
      # will be mandatory
      require_authentication: true

      # Username, optional, if not set, the username will be set to "default"
      # username: "default"

      # Password, required when require_authentication is enabled
      password: "changeme"

    network:
      # Timeouts for the read and write operations in milliseconds, set to -1 to disable or greater than 0 to enable
      timeout:
        read_ms: -1
        write_ms: 10000

#      # Keep-alive parameters to keep the socket connected in case of no activity
#      keepalive:
#        time: 0
#        interval: 0
#        probes: 0

#      # TLS settings
#      # If the configuration is missing or commented out, TLS is automatically disabled
#      # If kTLS is available, it will be automatically enabled.
#      tls:
#        # Path to the certificate and private key to use
#        certificate_path: "/etc/cachegrand/certificate.pem"
#        private_key_path: "/etc/cachegrand/certificate.key"
#
#        # Path to the ca certificate chain to use, optional
#        ca_certificate_chain_path: "/etc/cachegrand/ca.pem"
#
#        # If set to true, it ensures that the client sends a certificate and that the certificate is signed by a CA in
#        # the ca_certificate_chain_path, optional
#        verify_client_certificate: true
#
#        # Optional parameters to set the min and max version of the TLS versions accepted:
#        # - any
#        # - tls1.0
#        # - tls1.1
#        # - tls1.2
#        # - tls1.3
#        # When any is selected for min_version, automatically tls1.0 will be used.
#        min_version: tls1.2
#        max_version: any
#
#        # Optional parameter to set the allowed cipher suites, list the available ones with using
#        # /path/to/cachegrand-server --list-tls-cipher-suites
#        # The default list enables the ciphers supported by kTLS to allow the kernel offloading, other cipher suites
#        # are not supporte by kTLS.
#        cipher_suites:
#          - TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384
#          - TLS-DHE-RSA-WITH-AES-256-GCM-SHA384
#          - TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256
#          - TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
#          - TLS-DHE-RSA-WITH-AES-128-CCM
#          - TLS-DHE-RSA-WITH-AES-128-CCM-8
#          - TLS-RSA-WITH-AES-256-GCM-SHA384
#          - TLS-RSA-WITH-AES-128-GCM-SHA256
#          - TLS-RSA-WITH-AES-128-CCM
#          - TLS-RSA-WITH-AES-128-CCM-8
#          - TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256
#          - TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256
      # Bindings
      bindings:
        - host: 0.0.0.0
          port: 6379
          # Enable or disable TLS for the binding, optional parameter, if missing defaults to false
          # tls: false
        - host: 0.0.0.0
          port: 6380
          # To enable tls is necessary to uncomment the tls block above
          # tls: true
        - host: "::"
          port: 6379
        - host: "::"
          port: 6380
          # To enable tls is necessary to uncomment the tls block above
          # tls: true

  # Uncomment to enable prometheus support, more information available at
  # https://github.com/danielealbano/cachegrand/blob/main/docs/architecture/modules/prometheus.md
  - type: prometheus
    network:
      timeout:
        read_ms: -1
        write_ms: 10000
      bindings:
        - host: 0.0.0.0
          port: 9090

database:
  # Number of available user databases
  max_user_databases: 64

  # Limits for the database to prevent it from using too much system resources, optional.
  # The hard limit will prevent any operation that would exceed the limit, the soft limit will allow the operation but
  # will run the keys eviction process to try to free up some space.
  # When an hard limit is disabled, the corresponding soft limit will be ignored.
  # These below are general limits but there are backend limits as well in their specific section.
  limits:
    hard:
      # The max amount of keys that can be stored in the database, 0 means no limit
      max_keys: 1000000
#  # Optional
#  soft:
#    # When database.limit.hard.max_memory_usage is set to 0, this value will be ignored
#    max_keys: 999999

  # The snapshot settings, optional, if missing the snapshots will be disabled. Snapshots are compatible with the Redis
  # RDB format and can be used to restore the database state or import it from/to another instance.
  snapshots:
    # The path where the snapshot file will be stored, if the rotation is enabled, the path will be used as prefix and
    # the timestamp of the start of the snapshot will be appended to the file name.
    path: /var/lib/cachegrand/dump.rdb
    # The interval between the snapshots, the allowed units are s, m, h, if not specified the default is seconds.
    interval: 30m
    # If enabled, a snapshot will be taken at shutdown
    snapshot_at_shutdown: true
    # The number of keys that must be changed before a snapshot is taken, 0 means no limit
    min_keys_changed: 1
    # The amount of data that must be changed before a snapshot is taken, the allowed units are b, k, m, g, 0 means no
    # limit
    min_data_changed: 0
    # Rotation settings, optional, if missing the snapshots rotation will be disabled
    rotation:
      # The max number of snapshots files to keep, minimum 2
      max_files: 10

  backend: memory
  memory:
    # Limits:
    # - max_memory_usage: The max amount of memory that can be used by the database, can be expressed in bytes,
    #                     kilobytes, megabytes, gigabytes, using the suffixes b, k, m, g, or in percentage of the total
    #                     system memory.
    limits:
      hard:
        max_memory_usage: 75%
      # Optional
      soft:
        max_memory_usage: 70%

#  backend: file
#  file:
#    path: /var/lib/cachegrand
#    shard_size_mb: 100
#    max_opened_shards: 1000
#    garbage_collector:
#      min_interval_s: 60
#
#    # Limits:
#    # - max_disk_usage: the max amount of disk space that can be used by the database, can be expressed in bytes,
#    #                    kilobytes, megabytes, gigabytes, using the suffixes b, k, m, g, or in percentage of the total
#    #                    disk space.
#    #                    When setting the limit please take into account that the garbage collection will need some
#    #                    space to run, so the actual space used by the database can be higher than the limit.
#    limits:
#      hard:
#        max_disk_usage: 75%
# #    # Optional
# #    soft:
# #      max_disk_usage: 70%

  # Settings for the keys eviction when the database is full, comment out to disable
  keys_eviction:
    # The eviction policy to use when the database is full, can be one of the following:
    # - lru: evict the least recently used key
    # - lfu: evict the least frequently used key
    # - random: evict a random key
    # - ttl: evict the key with the lowest TTL
    policy: lru
    # If set to false, all the keys will be considered for evictions not only the ones that might expire. This setting
    # is useful to avoid the eviction of keys that are supposed to be kept forever.
    only_ttl: false

# The sentry.io service is used to automatically collect minidumps in case of crashes, it doesn't store them after that
# they are processed but be aware that minidumps will contain memory regions used by cachegrand and therefore may they
# may also contain cached data!
# To avoid accidental/unwanted uploads, it's turned off, if you want to provide crash data
# without having to attach manually generated coredumps or minidumps to a github issue simply enable sentry.
sentry:
  enable: false

# LOGS
# ---
# type:     console or file
# level:    array of flags: debug, verbose, info, warning, recoverable, error
#           it's possible to negate a flag prefixing it with no- (ie. no-debug), it is also
#           possible to select all the flags using the keyword all
#
# For type file
# file:
#   path:   path to the log file

logs:
  - type: console
    # Print to the console errors, warnings and informational messages
    level: [ all, no-verbose, no-debug]

    # or print everything
    # level: [ all ]

#  - type: file
#    level: [ all, no-verbose, no-debug ]
#    file:
#      path: /var/log/cachegrand/cachegrand.log
