name: Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { triplet: "ubuntu2004-x64-gcc", os: [ self-hosted, x64, ubuntu2004 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
          - { triplet: "ubuntu2204-x64-gcc", os: [ self-hosted, x64, ubuntu2204 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
          - { triplet: "ubuntu2210-x64-gcc", os: [ self-hosted, x64, ubuntu2210 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
          - { triplet: "ubuntu2004-arm64-gcc", os: [ self-hosted, arm64, ubuntu2004 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
          - { triplet: "ubuntu2204-arm64-gcc", os: [ self-hosted, arm64, ubuntu2204 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
          - { triplet: "ubuntu2210-arm64-gcc", os: [ self-hosted, arm64, ubuntu2210 ], ostype: "ubuntu", cc: "gcc", cxx: "g++" }
    name: "${{ matrix.config.triplet }}"
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Setup cmake
        uses: lukka/get-cmake@latest

      - name: Ensure 350 2MB Hugepages free (required for comprehensive testing)
        shell: bash
        timeout-minutes: 5
        run: while [ $(cat /proc/meminfo | grep HugePages_Free | awk '{ printf $2 }') -lt 350 ]; do echo "Requesting 350 2MB hugepages"; echo 350 | sudo tee /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages; cat /proc/meminfo | grep HugePages_; done; free -m;

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2

      - name: Install required dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake pkg-config git libnuma1 libnuma-dev libcurl4-openssl-dev libcurl4 libyaml-0-2 libyaml-dev libmbedtls-dev libpcre2-8-0 libpcre2-dev libjson-c-dev valgrind

      # Build the debug version of cachegrand-server and the tests
      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build-debug

      - name: Configure CMake - Debug
        shell: bash
        working-directory: ${{github.workspace}}/build-debug
        run: CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake $GITHUB_WORKSPACE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DUSE_HASH_ALGORITHM_T1HA2=1 -DBUILD_TESTS=1

      - name: Build cachegrand-tests - Debug
        working-directory: ${{github.workspace}}/build-debug
        shell: bash
        run: cmake --build . --target cachegrand-tests -- -j 4

      - name: Build cachegrand-server - Debug
        working-directory: ${{github.workspace}}/build-debug
        shell: bash
        run: cmake --build . --target cachegrand-server -- -j 4

      # Run the tests
      - name: Tests - Unit Tests - Debug
        working-directory: ${{github.workspace}}/build-debug
        shell: bash
        run: cd tests/unit_tests && sudo ./cachegrand-tests --order lex

      # Build the release version of cachegrand-server to ensure it builds fine (needed as artifact for later)
      - name: Create Build Environment - Release
        run: cmake -E make_directory ${{github.workspace}}/build-release

      - name: Configure CMake - Release
        shell: bash
        working-directory: ${{github.workspace}}/build-release
        run: CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake $GITHUB_WORKSPACE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DUSE_HASH_ALGORITHM_T1HA2=1

      - name: Build cachegrand-server - Release
        working-directory: ${{github.workspace}}/build-release
        shell: bash
        run: cmake --build . --target cachegrand-server -- -j 4

      # Generate the code coverage report
      - name: Code Coverage - Generation
        uses: danielealbano/lcov-action@v3
        with:
          gcov_path: /usr/bin/gcov-9
          remove_patterns: 3rdparty,tests

      # Upload the code coverage report to codecov.io
      - uses: codecov/codecov-action@v3
        with:
          files: ${{github.workspace}}/coverage.info
          flags: unittests # optional
          name: cachegrand-server
          fail_ci_if_error: false
          verbose: false
